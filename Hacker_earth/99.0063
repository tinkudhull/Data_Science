getwd()
setwd("C:/Users/Test User/Documents/Files/he")
train = read.csv("train.csv")
test = read.csv("test.csv")
sample = read.csv("sample_submission.csv")

trainid =  train$Id
testid = test$Id
train$Id = NULL
test$Id = NULL
test$SignFacing..Target. = 0
str(train)
str(test)
train$SignAspectRatio = (train$SignWidth/train$SignHeight)*100
test$SignAspectRatio = (test$SignWidth/test$SignHeight)*100
train$new = (train$AngleOfSign/train$SignAspectRatio)
test$new = (test$AngleOfSign/test$SignAspectRatio)
library(xgboost)
library(Matrix)
library(data.table)
library(dplyr)
library(caret)
df = data.table(train, keep.rownames = F)
dff = data.table(test, keep.rownames = F)

sparse_matrix = sparse.model.matrix(SignFacing..Target.~., data = df)
sparse_matrixx = sparse.model.matrix(SignFacing..Target.~., data = dff)

output =  as.integer(df$SignFacing..Target.)-1

params= list(objective = "multi:softprob", eta = 0.05,
             num_class = 4,eval_metric = "mlogloss",
             max_depth = 4#, tree_method = "hist", grow_policy = "lossguide"
             )
bstt = xgb.cv(data = sparse_matrix, label = output, params = params, nfold = 10,
              nrounds = 300, prediction = T, early_stopping_rounds = 10)
oof_prediction = data.frame(bstt$pred) %>% 
  mutate(max_prob = max.col(.,ties.method  = "last"),
         label = output+1)
head(oof_prediction)
confusionMatrix(factor(oof_prediction$label),
                factor(oof_prediction$max_prob),
                mode = "everything")


bst = xgboost(data = sparse_matrix, label = output, params = params, nrounds = 271)

names = dimnames(sparse_matrix)[[2]]
importance_matrix = xgb.importance(names, model = bst)
importance_matrix


pred = predict(bst, newdata = sparse_matrixx ,reshape = T)
head(pred)
str(sample)
submit = sample
pred = data.frame(pred)
str(pred)
submit$Front = pred$X1
submit$Left = pred$X2
submit$Rear = pred$X3
submit$Right = pred$X4
str(submit)
write.csv(submit, "submitoff.csv", row.names = F)
